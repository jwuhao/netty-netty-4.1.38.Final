// 1.[开始声明]
// syntax 版本号， 对于一个.proto文件而言，文件首个非空，非注释的行必须注明为Protobuf的语法版本，即syntax="proto3" , 否则默认的是proto2
syntax = "proto3";
 //2. 定义protobuf的包名称空间
// 和Java语言类似，通过package指定包名，用来避免信息（message）名字冲突 ， 如果两个信息的名称相同，但是package包名不同， 则它们可以共同存在
// 另外，package指定包名后，会对生成的消息POJO代码产生影响，在Java语言中，会以package指定的包名作为生成POJO类的包名
package io.netty.protocol;
// [结束声明]

//3. [开始 java 选项配置]
// 选项： 选项是否生效与".proto"文件使用的一些特定语言场景有关，在Java语言中，以"java_" 打头的"option"选项会生效
// 选项option java_package表示Protobuf 编译器生成的Java POJO 消息类时，生成类所在的Java 包名，如果没有该选项，则会以头部声明中的package作为java 包名。
// 选项option java_multiple_files 表示在生成的Java 类时的打包方式，在两种方式 ：
// 方式1 ， 一个消息对应一个独立的java类
// 方式2，所有的消息都作为内部类，打包到另外一个外部类中
// 此选项的值，默认为false , 也即是这种方式，表示使用外部类打包的方式，如果设置了option_java_multiple_files=true ，则使用这种方式1，生成
// java 类，则一个消息对应一个POJO Java 类， 则一个消息对应一个POJO Java 类。
// 选项option java_outer_classname 表示 Protobuf编译器在生成 Java POJO消息类时，如果.proto 定义了全部的POJO 的消息作为 内部类打包在同
// 一个外部类中， 则以此作为外部类的类名
option java_package = "io.netty.protocol";
option java_outer_classname = "MsgProtos";
// [结束 java 选项配置]

// [开始 消息定义]
// 定义Protobuf 消息结构体的关键字为message , 一个信息结构体由一个或多个消息字段结合成
message Msg {
  uint32 id = 1;  // Unique ID number for this person. 消息的Id
  string content = 2;       // 消息的内容
}

// [结束 消息定义]
// Probobuf消息字段的格式为
// 限定修饰符① | 数据类型② | 字段名称 ③ | = | 分配标识号 ④

// ① 限定修饰符
// repeated 限定修饰符，表示该字段可以包含0~N个元素的值，相当于Java 中的List(列表数据类型)
// singular 限定修饰符， 表示该字段可以包含0~1个元素的值，singular限定修饰符或默认的字段修饰符
// reserved 限定修饰符， 用来保留字段名称(Field Name) 和分配标识号(Assigning Tags) ，用于将来的扩展
// message MsgFoo {
//    reserved 12,15,9, to 11 ; // 预留将来要使用的的分配标识号(Assigning Tags)
//    reserved "foo","bar" ;    // 预留将来使用的字段名(field name)
// }
// 2.数据类型
// 详见下一个小节
// 3. 字段名
// 字段名称的命名与Java 语言的成员变量命名方式几乎是相同的
// Protobuf 建议字段的命名以下划线分割，例如使用first_name 形式，而不是驼峰形式 firstName .
// 4. 分配标识号
// 在消息定义中， 每个字段都有唯一的一个数字标识符， 可以理解为字段的编码值，叫作分配标识号(Assigning Tags) ,通过该值，通信双方才能互相识别对方的
// 的字段，当然，相同的编码值它的很多的限定修饰符和数据类型必须相同 ， 分配标识号是用来在消息的二进制格式中识别各个字段，一旦开始使用就不能名再改变
// 分配标识号的取舍范围 1~2^32(4294967296) ，其中编号 [1,15]之内的分配标识号， 时间和空间效率都是最高的， 为什么呢？[1,15]之内的标识号，在编码的时候
// 只会占用1个字节，[16,2047]之内的标识号需要占用2个字节，所以那些频繁的出现的消息字段，应该使用[1,15]之内的标识号，切记，要为将来可能添加，频繁
// 出现的字段预留一些标识号， 另外[1900~2000]之内的标识号，为Google Probobuf系统的内部保留值，建议不要在自己的项目中使用。
// 一个消息结构体中的标识号是无须连续的， 另外，在同一个消息结构体中，不同的字段不能使用相同的标识号。
// 8.5.3 字段的数据类型
// Protobuf 定义了一个基本数据类型，几乎都可以映射到C ++ Java 等语言的基本数据类型。
//  .proto Type                         Notes                                             Java Type
//   Float                                                                                double
// int32                    使用变长的编码，对于负值的效率很低， 如果字段有可能有负值，          int
//                           sint64替代
// uint32                   使用变长的编码                                                 int
// uint64                   使用变长的编码                                                 long
// sint32                   使用变长的编码，这些编码在负值比int32高效得多                     int
// sint64                   使用变长的编码，有符号的整形值，编码时比通常的int64 高效           long
// fixed32                  总是4个字节，如果数值总是比2^28大的话，这个类型比uint32高效        int
// fixed64                  总是8个字节，如果数值总是比2^56大的话，这个类型比uint64高效       long
// sfixed32                 总是4个字节                                                  int
// sfixed64                 总是8个字节                                                  int
// Bool                                                                                 boolean
// String                   一个字符串必须是UTF-8 编码或者6-bit ASCII编码文本               String
// Bytes                    可能包含任意顺序的字节数据                                     ByteString
// 变长的编码类型表示打包的字节并不是固定的，总是根据数据的大小或者长度来定，例如，int32  ，如果数值比较小
// 在0~127时，使用一个字节打包
// 关于fixed32和int32的区别，fixed32的打包效率比int32的效率高，但是使用空间一般比int32要多，因此一个属于的时间效率高，一个属性的空间效率高
// 根据项目的实际情况，一般选择fixed32，如果遇到对传输数据量要求比较苛刻的环境，则可以选择int32
// 8.5.4 其他的语法规范
// 1. import 声明
// 在需要多个消息结构体时， ".proto"文件可以像Java语言的类文件，一样分离为多个，在需要的时候通过import导入需要的文件，导入的操作和Java
// 的import的操作大致相同
// 嵌套消息
// .proto 文件支持嵌套消息，消息中可以打包含另一个消息作为其字段，也可以在消息中定义一个新的消息
// message Outer {
// message MiddleA {
//    message Inner{
//    int64 ival = 1;
//    boolean booly = 2 ;
// }
// }
// }
// 如果你想在它的父消息类型的外部重复使用这些消息内部的消息类型，可以使用Parent.Type的形式来使用它，例如
// message SomeOtherMessage {
//   Outer.MiddleA.Inner ref = 1;
// }
// 3. enum 枚举，枚举的定义和Java 相同 ，但是有一些限制，枚举的值必须大于等于0的整数，使用分号(:)分隔枚举变量，而不是Java 语言中的","
// enum VoipProtocol {
//  H323 = 1;
//   SIP = 2;
 //  MGCP = 3 ;
// H248 = 4;
// }
